{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","DarkMode/DarkMode.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","DarkMode/DarkMode.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","existingCases","value","data-testid","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","active","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","alt","React","Component","DarkMode","darkMode","setDarkMode","theme","createMuiTheme","palette","type","ThemeProvider","Paper","height","direction","Switch","checked","subtitle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f289f231.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"active\":\"Cards_active__1mwzX\"};","import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport CountUp from 'react-countup'\n\nimport cx from 'classnames'\n\nimport styles from './Cards.module.css'\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }}) => {\n\n    if(!confirmed){\n        return 'Loading...'\n    }\n\n    let existingCases = confirmed.value - recovered.value - deaths.value\n\n    return (\n        <div data-testid='cards' className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography data-testid='typo_infected' color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />    \n                        </Typography>\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\" >Number of confirmed cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={2}className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography data-testid='typo_recovered' color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />   \n                        </Typography>\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\" >Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography data-testid='typo_deaths' color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />   \n                        </Typography>\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\" >Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\n                    <CardContent>\n                        <Typography data-testid='typo_active' color=\"textSecondary\" gutterBottom>Active</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={existingCases}\n                                duration={2.5}\n                                separator=\",\"\n                            />   \n                        </Typography>\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\" >Number of existing cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n\n    )\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\n\nexport const fetchData = async (country) => {\n\n    let changeableUrl = url\n\n     if(country){\n         changeableUrl = `${url}/countries/${country}`\n       \n     }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl)\n        \n        return { confirmed, recovered, deaths, lastUpdate }\n        \n    } catch (error){\n        console.log(error)\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n        \n        return modifiedData\n    } catch (error) { }\n}\n\n// export const fetchDailyData = async () => {\n//     try {\n//         // const { data  } = await axios.get('${url}/daily')\n//         const { data  } = await axios.get('https://covid19.mathdro.id/api/daily')\n\n//         const modifiedData = data.map((dailyData) => ({\n//             confirmed: dailyData.confirmed.total,\n//             deaths: dailyData.deaths.total,\n//             date: dailyData.reportDate\n//         }))\n\n//         return modifiedData\n//     } catch (error) { }\n// }\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`)\n\n        return countries.map((country) => country.name)\n    } catch (error){}\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport styles from './Chart.module.css'\n\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\n    const [dailyData, setDailyData] = useState([])\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData())\n        }\n\n        fetchAPI()\n    }, [])\n\n    const lineChart = (\n        dailyData.length\n            ? (\n                <Line \n                    data={{\n                        labels: dailyData.map(({ date }) => date),\n                        datasets: [{\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: '#3333ff', \n                            fill: true\n                        }, {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'red', \n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                            fill: true\n                        }]\n                    }}\n                />\n                ) : null\n    )\n\n\n    const barChart = (\n        confirmed\n            ?(\n                <Bar \n                    data={{\n                        labels: ['Infected', 'Recovered', 'Deaths', 'Active'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: [\n                                'rgba(0, 0, 255, 0.5)',\n                                'rgba(0, 255, 0, 0.5)',\n                                'rgba(255, 0, 0, 0.5)',\n                                'rgba(253, 236, 0, 0.5)'\n                            ],\n                            data: [confirmed.value, recovered.value, deaths.value, confirmed.value - recovered.value - deaths.value]\n                        }]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        title: { display: true, text: `Current state in ${country}`}\n                    }}\n                />\n            ) : null   \n    )\n\n    return (\n        <div className={styles.container}>\n            { country ? barChart : lineChart }\n        </div>\n    )\n}\n\nexport default Chart\n\n\n\n// import React, { useState, useEffect } from 'react'\n// import { fetchDailyData } from '../../api'\n// import { Line, Bar } from 'react-chartjs-2'\n\n// import styles from './Chart.module.css'\n\n// const Chart = () => {\n//     const [dailyData, setDailyData] = useState([])\n\n//     useEffect(() => {\n//         const fetchAPI = async () => {\n//            setDailyData(await fetchDailyData())\n//         }\n\n//         fetchAPI()\n//     }, [])\n\n//     const lineChart = (\n//         dailyData.length\n//         ?\n//         (<Line \n//             data={{\n//                 labels: dailyData.map(({ date }) => date),\n//                 datasets: [{\n//                     data: dailyData.map(( {confirmed }) => confirmed),\n//                     label: 'Infected',\n//                     borderColor: '#3333ff',\n//                     fill: true\n//                 }, {\n//                     data: dailyData.map(( {deaths }) => deaths),\n//                     label: 'Deaths',\n//                     borderColor: '#red',\n//                     backgroundColor: 'rgba(255, 0, 0, 0.5)',\n//                     fill: true\n//                 }]\n//             }}\n//         />) : null\n//     )\n\n//     return (\n//         <div className={styles.container}>\n//             { lineChart }\n//         </div>\n//     )\n// }\n\n// export default Chart","import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl } from '@material-ui/core'\n\nimport styles from './CountryPicker.module.css'\n\nimport { fetchCountries } from '../../api'\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([])\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries())\n        }\n\n        fetchAPI()\n    }, [setFetchedCountries])\n\n    console.log(fetchedCountries)\n    return (\n       <FormControl className={styles.formControl}>\n           <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n               <option value=''>Global</option>\n               {fetchedCountries.map((country, i) => \n                    <option key={i} value={country}>{country}</option>)}\n           </NativeSelect>\n       </FormControl>\n    )\n}\n\nexport default CountryPicker","import React from 'react'\n\nimport { Cards, Chart, CountryPicker } from './components'\nimport styles from './App.module.css'\nimport { fetchData } from './api'\n\n// import coronaImage from ',/img/'\n\nclass App extends React.Component{\n    state = {\n        data: {},\n        country: ''\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData()\n        this.setState({ data: fetchedData})\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country)\n        this.setState({ data: fetchedData, country: country })\n    }\n\n    \n    render(){\n        const { data, country } = this.state\n        const coronaImageUrl = 'https://raw.githubusercontent.com/adrianhajdin/project_corona_tracker/master/src/images/image.png'\n\n        return(\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImageUrl} alt='COVID-19'/>\n                <Cards data={ data }/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={ data } country={country} />\n            </div>\n        )\n    }\n}\n\nexport default App","import React, { useState } from 'react'\nimport { Paper, Switch, Typography, Grid } from \"@material-ui/core\";\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n\nimport App from '../App.js'\n\nimport styles from './DarkMode.module.css'\n\nfunction DarkMode(){\n    const [ darkMode, setDarkMode ] = useState(false)\n\n    const theme = createMuiTheme({\n        palette: {\n            type: darkMode ? \"dark\" : \"light\"\n        }\n    })\n\n    // handleOnChange(event){\n    //     this.setState(setDarkMode: )\n    // }\n\n    return(\n        <div className={styles.container}>\n            <ThemeProvider theme={theme}>\n                <Paper styles={{ height: \"100%\" }}>\n                    <Grid container direction=\"column\">\n                        <Typography variant='h5'>EMBEDDED EDITION</Typography>\n                        <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)} />\n                        <Typography subtitle='h8'> {darkMode ? 'Light theme' : 'Dark theme'}  </Typography>\n                        <App />\n                    </Grid>\n                </Paper>\n            </ThemeProvider>\n        </div>\n    )\n}\n\nexport default DarkMode","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import * as serviceWorker from './serviceWorker';\n\n// import DarkMode from './App.js'\nimport DarkMode from './DarkMode/DarkMode.js'\n// import App from './App.js'\nReactDOM.render(<DarkMode />, document.getElementById('root'))\n\n// ReactDOM.render(<App />, document.getElementById('root'))\n\n// serviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DarkMode_container__3tINQ\"};"],"sourceRoot":""}